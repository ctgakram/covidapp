@model AppProj.Web.Models.GatePassModel
@{
    var ajaxOpt = new AjaxOptions
    {
        HttpMethod = "POST",
        UpdateTargetId = "dialog1Body",
        InsertionMode = InsertionMode.Replace,
        OnSuccess = "openDialog1('Gate Pass')",
        LoadingElementId = "loading",
        OnFailure = "failure"
    };
}
@Html.ValidationSummary(true)
@if (Model != null)
{
    @Html.HiddenFor(m => m.Id)
}
<div id="divFromInfo">
    <div class="row-fluid">
            <div class="span3">
                <h3 class="pull-left muted font-head">Date: </h3>
                <div class="controls">
                @Html.TextBoxFor(model => model.Date, "{0:" + AppProj.Web.SessionHelper.DateFormat + "}", new { @placeholder = "Date" })
                </div>
            </div>
            <div class="span3">
                <h3 class="pull-left muted font-head">Department/Project: </h3>
                <div class="controls">
                   @Html.TextBoxFor(model => model.FromAreaAddress)
                </div>
            </div>
            <div class="span3">
                <h3 class="pull-left muted font-head">From Area: </h3>
                <div class="controls">
                  @Html.TextBoxFor(model => model.DateOfReturn, "{0:" + AppProj.Web.SessionHelper.DateFormat + "}", new { @placeholder = "Date" })
                </div>
            </div>
            <div class="span2">
                <h3 class="pull-left muted font-head">Is Return</h3>
                <div class="controls">
                  @Html.CheckBoxFor(model => model.IsReturn)
                </div>
            </div>
    </div>
    <div class="row-fluid">
            <div class="span10">
                <h3 class="pull-left muted font-head">Bar Code: </h3>
                @Html.TextBoxFor(model => model.Challan)
                @Html.TextBoxFor(model => model.Asset)
                @Html.TextBoxFor(model => model.Description)
                @Html.TextBoxFor(model => model.Quantity)
                @Html.TextBoxFor(model => model.ToAreaAddress)
                @Html.TextBoxFor(model => model.Purpose)
                @Html.TextBoxFor(model => model.Remarks)
            </div>
            <div class="span3" style="margin-top: 20px">
                <input id="btnAdd" type="button" value="Add" class="btn pull-left" />
            </div>
   </div>
   <div class="row-fluid">
        <table id="gridAssetExpireTable" class="table table-striped table-bordered">
            <thead>
                <tr style="background-color: #e3e3e3;">
                    <td class="title">Barcode</td>
                    <td class="title">Book Value</td>
                    <td class="title">Action</td>
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>
        <div class="row-fluid">
            <p>
                <input id="btnNext" type="button" value="Next" class="btn btn-success pull-right" />
            </p>
        </div>
    </div>
</div>
<div id="divToInfo" style="display: none;">
    <div class="row-fluid" style="margin-bottom: 10px">
        <div class="span5">
            <h3 class="pull-left muted font-head">
                @Html.HiddenFor(m => m.RadioButtonMovementId)
                @foreach (var rdo in Model.RadioButtonMain)
                {
                    <label class="radio inline">
                        @Html.RadioButtonFor(m => m.RadioButtonMain, rdo.Id, rdo.Selected ? new { @checked = "checked" } : null)
                        @Html.Raw(rdo.Label)
                    </label>
            
                }</h3>
        </div>
    </div>
    <div class="row-fluid">
        <div id="divForMovement">
            <div class="row-fluid" id="IsChangeLocationPanel" style="margin-bottom: 10px">
                <div class="span3">
                    <h3 class="pull-left muted font-head">Area: </h3>
                    @Html.DropDownListFor(model => model.ToAreaId, Model.toAreas)
                </div>
            </div>
        </div>
        <div id="divForService">
            <div class="row-fluid" style="margin-bottom: 10px">
                <div class="span3">
                <h3 class="pull-left muted font-head">Return Date: </h3>
                @Html.TextBoxFor(model => model.DateOfReturn, "{0:" + AppProj.Web.SessionHelper.DateFormat + "}", new { @placeholder = "Return Date" })
                </div>
            </div>
        </div>
        <div class="row-fluid">
            <div class="pull-right" style="margin-top: 10px;">
                <h3 class="pull-left muted font-head">Remarks: </h3>
                @Html.TextAreaFor(model => model.Remarks)
            </div>
        </div>
        <div class="row-fluid">
            <p>
                <input id="btnBack" type="button" value="Back" class="btn" />
                <input id="btnSubmit" type="button" value="Save" class="btn btn-success pull-right" />
                <input id="btnComplete" type="button" value="Save & Complete" class="btn btn-warning pull-right" />
            </p>
        </div>
    </div>
</div>
<script type="text/javascript">
    ValidatateForm("form0");

    var expfixAssetDetails = new Array();

    $(document).ready(function () {

        DatePicker('Date', '@AppProj.Web.SessionHelper.DateFormat');
        $('#divForService').css("display", "none");

        $('#DateOfReturn').datepicker({
            format: "dd M, yyyy",
            autoclose: true,
            startDate: '+0d'
        });

        //for back button & parent page show
        $("#btnBack").click(function () {
            $("#divFromInfo").show();
            $("#divToInfo").hide();
            $("#barCode").val('');
            $("#barCode").focus();
        });

        $("#btnNext").click(function () {

            if (expfixAssetDetails.length <= 0) {
                alert('Please Add Fixed Assets!');
                $('#barCode').focus();
                return false;
            }
            $("#barCode").val('');
            $("#divFromInfo").hide();
            $("#divToInfo").show();

        });

        $("#RadioButtonMovementId").val($('input:radio[name=RadioButtonMain]:checked').val());

        $("input[name='RadioButtonMain']").change(function () {
            var radio = $('input:radio[name=RadioButtonMain]:checked').val();
            $("#RadioButtonMovementId").val(radio);
            if (radio > 1)
            {
                $('#divForMovement').css("display", "none");
                $('#divForService').css("display", "block");
            }
            else {
                $('#divForMovement').css("display", "block");
                $('#divForService').css("display", "none");
            }
        });

        $("#btnAdd").click(function () {
            var fixedAssetId = parseInt($('#codeFixedAssetId').val());
            var barcode = $('#barCode').val();
            var bookvalue = $('#codeFixedAssetBookValue').val();
            if (fixedAssetId > 0) {
                var canAdd = true;
                $.each(expfixAssetDetails, function (i, v) {
                    if (expfixAssetDetails[i] == fixedAssetId) {
                        alert('Sorry! Fixed Asset Exist.');
                        canAdd = false;
                    }

                });

                if (canAdd) {
                    AddItem(fixedAssetId, barcode, bookvalue);
                }

            }

            $("#barCode").val('');
        });

        $(".delete").live("click", function () {
            $("#barCode").val('');
            var delete_id = parseInt($(this).attr("fixAssetId"));
            $.each(expfixAssetDetails, function (i, v) {
                if (expfixAssetDetails[i] == delete_id) {
                    expfixAssetDetails.splice(i, 1);
                }
                $("tr#" + delete_id).remove().fadeOut();
            });

            if (expfixAssetDetails.length <= 0) {
            $('#FromAreaId').attr("disabled", false);
        }
        })
    });

    $("#btnSubmit").click(function () {

            $("#barCode").val('');

            var v = Validation();

            if (!v) {
                return false;
            }

            var entity = new Object();

            entity.Id = $('#Id').val();
            entity.Date = $('#Date').val();
            entity.Remarks = $('#Remarks').val();
            entity.FromAreaId = $('#FromAreaId').val();
            entity.ToAreaId = $('#ToAreaId').val();
            entity.IsMoveOnService = ($('#RadioButtonMovementId').val() == 1) ? false : true;
            entity.DateOfReturn = $('#DateOfReturn').val();
            entity.Code = $('#assetMovCode').val();
            entity.IsEditable = true;
            entity.Details = expfixAssetDetails;

            if (confirm('Do you want to save?')) {
                $.ajax({
                    url: '@Url.Action("Save")',
                    type: 'POST',
                    data: JSON.stringify(entity),
                    contentType: 'application/json;charset=utf-8',
                    beforeSend: function () {
                        $("#loading").show();
                    },
                    success: function (result) {
                        $("#loading").hide();
                        DataTableRedraw($('#gridTable'));

                        if (result.Data != "") {
                            alert(result.Data);
                        }

                        closeDialog1();
                    },
                    error: function (x, e) {
                        $("#loading").hide();
                        alert('error');
                    }
                });
        }
        });

    $("#btnComplete").click(function () {

        $("#barCode").val('');

        var v = Validation();

        if (!v) {
            return false;
        }

        var entity = new Object();

        entity.Id = $('#Id').val();
        entity.Date = $('#Date').val();
        entity.Remarks = $('#Remarks').val();
        entity.FromAreaId = $('#FromAreaId').val();
        entity.ToAreaId = $('#ToAreaId').val();
        entity.IsMoveOnService = ($('#RadioButtonMovementId').val() == 1) ? false : true;
        entity.DateOfReturn = $('#DateOfReturn').val();
        entity.Code = $('#assetMovCode').val();
        entity.IsEditable = false;
        entity.Details = expfixAssetDetails;

        if (confirm('Do you want to save?')) {
            $.ajax({
                url: '@Url.Action("Save")',
                type: 'POST',
                data: JSON.stringify(entity),
                contentType: 'application/json;charset=utf-8',
                beforeSend: function () {
                    $("#loading").show();
                },
                success: function (result) {
                    $("#loading").hide();
                    DataTableRedraw($('#gridTable'));

                    if (result.Data != "") {
                        alert(result.Data);
                    }

                    closeDialog1();
                },
                error: function (x, e) {
                    $("#loading").hide();
                    alert('error');
                }
            });
        }
    });


    function Validation() {

        //check any item added
        var radio = $('input:radio[name=RadioButtonMain]:checked').val();

        if (expfixAssetDetails.length <= 0) {
            alert('Please Add Fixed Assets!');
            $('#barCode').focus();
            return false;
        }

        if ($('#Remarks').val().length == 0) {
            alert('Please Provide Remarks!');
            $('#Remarks').focus();
            return false;
        }

        return true;
    }


    $('#barCode').typeahead({

        hint: true,
        highlight: true,
        minLength: 3
    },
             {
                 items: 8,
                 name: 'Id',
                 displayKey: 'Name',
                 property: "Name",
                 //source: substringMatcher(states)
                 source: function (strmaterial, process) {
                     $("#codeFixedAssetId").val("");
                     $("#codeFixedAssetBookValue").val("");
                     var url = '@Url.Content("~/FixedAsset/FixedAssetForMovSearch")';
                     return $.getJSON(url, { strmaterial: $("#barCode").val(), areaId: $("#FromAreaId").val() },
                       function (data) {
                           return process(data);
                       });
                 },
                 updater: function (item) {
                     return item.Name;
                 }

             }).on('typeahead:selected', function (obj, datum) {
                 $("#codeFixedAssetId").val(datum.Id);
                 $("#codeFixedAssetBookValue").val(datum.BookValue);
                 $("#btnAdd").focus();
             });


             function AddItem(fixedAssetId, barcode, bookvalue) {

                 var data = new Object();

                 data.FixedAssetId = fixedAssetId;
                 data.barcode = barcode;
                 data.bookvalue = bookvalue;

                 expfixAssetDetails.push(data.FixedAssetId);


                 var html = '<tr id="' + data.FixedAssetId + '">'
                 + '<td>' + data.barcode + '</td>'
                 + '<td>' + data.bookvalue + '</td>'
                 + '<td><a href="javascript:void(0);" fixAssetId="' + data.FixedAssetId + '"  class="btn btn-danger btn-mini delete">Delete</a></td>';
                 html += '</tr>';

                 $("table#gridAssetExpireTable > tbody").append(html);

                 if (expfixAssetDetails.length > 0) {
                     $('#FromAreaId').attr("disabled", true);
                 }
                 $("#barCode").val('');
                 $("#barCode").focus();

             }


</script>

